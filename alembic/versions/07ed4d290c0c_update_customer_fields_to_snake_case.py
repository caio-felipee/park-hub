"""Update customer fields to snake_case

Revision ID: 07ed4d290c0c
Revises: 4bb2050ba351
Create Date: 2025-09-28 01:46:38.710971

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "07ed4d290c0c"
down_revision: Union[str, Sequence[str], None] = "4bb2050ba351"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("customer", sa.Column("user_id", sa.Uuid(), nullable=False))
    op.add_column("customer", sa.Column("first_name", sa.String(), nullable=False))
    op.add_column("customer", sa.Column("last_name", sa.String(), nullable=False))
    op.add_column("customer", sa.Column("birth_date", sa.Date(), nullable=False))
    op.drop_constraint(op.f("uq__customer__userId"), "customer", type_="unique")
    op.create_unique_constraint(op.f("uq__customer__user_id"), "customer", ["user_id"])
    op.drop_constraint(
        op.f("fk__customer__userId__user"), "customer", type_="foreignkey"
    )
    op.create_foreign_key(
        op.f("fk__customer__user_id__user"), "customer", "user", ["user_id"], ["id"]
    )
    op.drop_column("customer", "birthDate")
    op.drop_column("customer", "lastName")
    op.drop_column("customer", "userId")
    op.drop_column("customer", "firstName")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "customer",
        sa.Column("firstName", sa.VARCHAR(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "customer", sa.Column("userId", sa.UUID(), autoincrement=False, nullable=False)
    )
    op.add_column(
        "customer",
        sa.Column("lastName", sa.VARCHAR(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "customer",
        sa.Column("birthDate", sa.DATE(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(
        op.f("fk__customer__user_id__user"), "customer", type_="foreignkey"
    )
    op.create_foreign_key(
        op.f("fk__customer__userId__user"), "customer", "user", ["userId"], ["id"]
    )
    op.drop_constraint(op.f("uq__customer__user_id"), "customer", type_="unique")
    op.create_unique_constraint(
        op.f("uq__customer__userId"),
        "customer",
        ["userId"],
        postgresql_nulls_not_distinct=False,
    )
    op.drop_column("customer", "birth_date")
    op.drop_column("customer", "last_name")
    op.drop_column("customer", "first_name")
    op.drop_column("customer", "user_id")
    # ### end Alembic commands ###
